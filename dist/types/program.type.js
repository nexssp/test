const{dr:dr,dg:dg,di:di,error:error,dy:dy}=require("@nexssp/logdebug"),{yellow:yellow,green:green,bold:bold,purple:purple,yellowBG2:yellowBG2,red:red}=require("@nexssp/ansi"),{nExec:nExec}=require("@nexssp/system");function shouldNotContain(e,o,t){return should(arguments.callee.name,e,o,t)}function shouldContain(e,o,t){return should(arguments.callee.name,e,o,t)}function checkExitCode(e,o){return o.exitCode===e}function should(e,o,t,{chdir:s,nxsInspect:n,stopOnError:d=!1}={}){if("null"==o)process.testData||(console.error("You need to specify REGEXP or STRING for the first test."),process.exit()),dg(`Using cached result of previous command: ${bold(process.testTest)}`),data=process.testData;else{s?dg(`Set folder location in options: ${bold(s)}`):dy("No folder to change the location. process.cwd()",process.cwd());const e=nExec(o,{cwd:s});if(r=e.stdout+e.stderr,arguments[3]&&arguments[3].exitCode){if(!checkExitCode(arguments[3].exitCode,e))return dr(`Exit Code does not match: SHOULD BE: ${arguments[3].exitCode}!= RECEIVED: ${e.exitCode}`),console.log("output stdout:"),console.log(r.stdout),console.log("output stdout:"),console.log(r.stderr),!1}else if(0!==e.exitCode)return console.log(yellowBG2(red(bold(`Exit Code should be 0. Now it is: ${e.exitCode}`)))),console.log("output stdout:"),console.log(r.stdout),console.log("output stdout:"),console.log(r.stderr),d&&(error("Stop on error is enabled. STOPPED. To continue all tests remove --stopOnError"),process.exit(0)),!1}let l,i,a,c;if(data=process.testData=r&&r.replace?r.replace(/[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g,""):r,dg(`>>> ${e.camelCase()}: ${bold(green(t))}`),data)if(data=data.trim(),t instanceof RegExp)a=t.test(data);else{c=new RegExp(t,"i").exec(data),l=c&&c.length>1,i=data&&data.includes(t)}let u="contains";return"shouldNotContain"===e&&(l=c&&!l,i=!i,a=!a),l&&!t instanceof RegExp?c:!i||t instanceof RegExp?a?data:("shouldNotContain"===e&&(data=data.replace(t,bold(purple(t)))),data?(dr(bold(`But ${u}: `)),di(data),n&&(error(yellow(bold("INSPECT: "))),console.log(require("util").inspect(data)))):(dr("But is empty."),dr(`Maybe try run the function which couse the issue directly from Nexss Programmer.\n${green(bold(o))}`)),dr(bold("=======================================================")),dr(bold("process.cwd()",process.cwd())),void(d&&(error("Stop on error is enabled. STOPPED. To continue all tests remove --stopOnError"),process.exit(0)))):data}function test2(e){const o=`nexss randomfile${e}`;return out(`Test2: ${o}`),o}require("@nexssp/extend")("string"),module.exports={shouldContain:shouldContain,shouldNotContain:shouldNotContain};