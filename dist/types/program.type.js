const{exe:exe}=require("../lib"),{dr:dr,dg:dg,di:di,error:error}=require("@nexssp/logdebug"),{yellow:yellow,green:green,bold:bold,purple:purple}=require("@nexssp/ansi");function shouldNotContain(e,o,t){return should(arguments.callee.name,e,o,t)}function shouldContain(e,o,t){return should(arguments.callee.name,e,o,t)}function should(e,o,t,{chdir:r,nxsInspect:s,stopOnError:n=!1}={}){if("null"==o)process.testData||(console.error("You need to specify REGEXP or STRING for the first test."),process.exit()),dg(`Using cached result of previous command: ${bold(process.testTest)}`),data=process.testData;else{process.testTest=o,dg(`Changing folder ${bold(r)}`);const e=exe(o,{cwd:r});data=process.testData=e&&e.replace?e.replace(/[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g,""):e}let d,a,l,i;if(data)if(data=data.trim(),t instanceof RegExp)l=t.test(data);else{i=new RegExp(t,"i").exec(data),d=i&&i.length>1,a=data&&data.includes(t)}return"shouldNotContain"===e&&(d=i&&!d,a=!a,l=!l),d&&!t instanceof RegExp?i:!a||t instanceof RegExp?l?data:("shouldNotContain"===e&&(data=data.replace(t,bold(purple(t)))),data?(dr(bold("But contains: ")),di(data),s&&(error(yellow(bold("INSPECT: "))),console.log(require("util").inspect(data)))):(dr("But is empty."),dr(`Maybe try run the function which couse the issue directly from Nexss Programmer.\n${green(bold(o))}`)),dr(bold("=======================================================")),dr(bold("process.cwd()",process.cwd())),void(n&&(error("Stop on error is enabled. STOPPED"),process.exit(0)))):data}function test2(e){const o=`nexss randomfile${e}`;return out(`Test2: ${o}`),o}module.exports={shouldContain:shouldContain,shouldNotContain:shouldNotContain};