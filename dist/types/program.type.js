const{dr:dr,dg:dg,di:di,error:error,dy:dy}=require("@nexssp/logdebug"),{yellow:yellow,green:green,bold:bold,purple:purple,yellowBG2:yellowBG2,red:red}=require("@nexssp/ansi"),{nExec:nExec,nSpawn:nSpawn}=require("@nexssp/system");function shouldNotContain(e,t,o){return should(arguments.callee.name,e,t,o)}function shouldContain(e,t,o){return should(arguments.callee.name,e,t,o)}function checkExitCode(e,t){return t.exitCode===e}function should(fname,test,regE,{chdir:chdir,nxsInspect:nxsInspect,stopOnError:stopOnError=!1,testFunction:testFunction=nExec}={}){if("null"==test)process.testData||(console.error("You need to specify REGEXP or STRING for the first test."),process.exit()),dg(`Using cached result of previous command: ${bold(process.testTest)}`),data=process.testData;else{chdir?dg(`Set folder location in options: ${bold(chdir)}`):dy("No folder to change the location. process.cwd()",process.cwd());const functionForExe=eval(testFunction)||nExec,result=functionForExe(test,{cwd:chdir});if(r=result.stdout+result.stderr,arguments[3]&&arguments[3].exitCode){if(!checkExitCode(arguments[3].exitCode,result))return dr(`Exit Code does not match: SHOULD BE: ${arguments[3].exitCode}!= RECEIVED: ${result.exitCode}`),r.stdout||r.stderr?(console.log("output stdout:"),console.log(r.stdout),console.log("output stderr:"),console.log(r.stderr)):console.error(r),!1}else if(0!==result.exitCode)return console.log(yellowBG2(red(bold(`Exit Code should be 0. Now it is: ${result.exitCode}`)))),console.log("output stdout:"),console.log(r.stdout),console.log("output stderr:"),console.log(r.stderr),stopOnError&&(error("Stop on error is enabled. STOPPED. To continue all tests remove --stopOnError"),process.exit(0)),!1}let result,result2,result3,match;if(data=process.testData=r&&r.replace?r.replace(/[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g,""):r,dg(`>>> ${fname.camelCase()}: ${bold(green(regE))}`),data)if(data=data.trim(),regE instanceof RegExp)result3=regE.test(data);else{let e=new RegExp(regE,"i");match=e.exec(data),result=match&&match.length>1,result2=data&&data.includes(regE)}let title="contains";return"shouldNotContain"===fname&&(result=match&&!result,result2=!result2,result3=!result3),result&&!regE instanceof RegExp?match:!result2||regE instanceof RegExp?result3?data:("shouldNotContain"===fname&&(data=data.replace(regE,bold(purple(regE)))),data?(dr(bold(`But ${title}: `)),di(data),nxsInspect&&(error(yellow(bold("INSPECT: "))),console.log(require("util").inspect(data)))):(dr("But is empty."),dr(`Maybe try run the function which couse the issue directly from Nexss Programmer.\n${green(bold(test))}`)),dr(bold("=======================================================")),dr(bold("process.cwd()",process.cwd())),void(stopOnError&&(error("Stop on error is enabled. STOPPED. To continue all tests remove --stopOnError"),process.exit(0)))):data}function test2(e){const t=`nexss randomfile${e}`;return out(`Test2: ${t}`),t}require("@nexssp/extend")("string"),module.exports={shouldContain:shouldContain,shouldNotContain:shouldNotContain};