const{bold:bold,green:green,yellow:yellow}=require("@nexssp/ansi"),{subtest:subtest}=require("./subtest"),{error:error,header:header}=require("@nexssp/logdebug"),path=require("path"),fs=require("fs"),testOne=(e,{startFromTest:t=1,display:s=!1}={})=>{const r={file:e};let u;u=require(e),u.uniqueTestValues||(u.uniqueTestValues=["Nexss"]);[].length>0||u.omit;return u.uniqueTestValues.reduce(((s,n)=>{const i=require("os").tmpdir(),o=`Nexss-test-${Math.random().toString(36).substring(7)}`,a=path.join(i,o);r.testPath=a,fs.existsSync(a)||fs.mkdirSync(a),header(`file: ${green(e)}`);const l=subtest(u,{startFromTest:t,file:e,value:n,chdir:a});return s.concat(l)}),[])};module.exports={testOne:testOne};