const testTypes=require("./types"),{error:error,dbg:dbg,dg:dg,dr:dr,dy:dy,header:header}=require("@nexssp/logdebug"),{yellow:yellow,bold:bold,magenta:magenta}=require("@nexssp/ansi"),subtest=(allTests,{file:file,value:value,display:display=!1,chdir:chdir}={})=>{allTests.nexsstests||(error("check:",file),process.exit(1));let totalOk=0,totalFailed=0;const rrr=allTests.nexsstests.map((subtestItem=>{subtestItem.file=file,subtestItem.title=-1!==subtestItem.title.indexOf("$")&&value?evalTS(subtestItem.title,value):subtestItem.title;const typeOfTest=subtestItem.type||allTests.defaultType||"shouldContain";subtestItem.testType=typeOfTest,subtestItem.params||(error("check:",file),error("No parames on test",subtestItem.title),process.exit(1));const testBody=`${subtestItem.params[0]} ${typeOfTest} -> ${subtestItem.params[1]}`;header(`TEST FOR:  ${magenta(value)}, ${yellow(subtestItem.title)}`),dbg(`${bold(yellow(evalTS(subtestItem.params[0],value)))}\n${bold(yellow(typeOfTest))}  ==>\n ${bold(subtestItem.params[1])}`);const testExecuteResult=eval(testTypes[typeOfTest])(...subtestItem.params.map((e=>null!==e&&"object"==typeof e||allTests.notEval||subtestItem.notEval?e:evalTS(e,value))),{chdir:chdir});return subtestItem.result=testExecuteResult,subtestItem.testBody=testBody,testExecuteResult?(dg(bold("OK.\n")),subtestItem.ok=!0,totalOk++):(dr(bold("FAILED.\n")),subtestItem.ok=!1,totalFailed++),subtestItem}));return{file:file,results:rrr,totalOk:totalOk,totalFailed:totalFailed}};function evalTS(v,uniqueTestValue){return eval("`"+v+"`")}module.exports={subtest:subtest};