const{yellow:yellow,blue:blue,green:green,red:red}=require("@nexssp/ansi"),path=require("path");function camelCase(e){var r=e.replace(/([A-Z])/g," $1");return r.charAt(0).toUpperCase()+r.slice(1)}if(1*process.versions.node.split(".")[0]<12){const{nSpawnSync:e}=require("../../lib/nProcess");exe=e}else exe=exeOLD;function exeOLD(e,r){let s;r=r||{},"win32"!==process.platform&&Object.assign(r,{shell:process.shell}),r.cwd||delete r.cwd;const{execSync:t}=require("child_process");try{return s=t(`${e} --nxsPipeErrors`,r).toString(),s}catch(e){s=e.stdout.toString(),process.argv.includes("--errors")&&console.error(e),r&&r.stopOnErrors&&(process.exitCode=1)}return s}var fs=require("fs"),deleteFolderRecursive=function(e){fs.existsSync(e)&&(fs.readdirSync(e).forEach((function(r,s){var t=e+"/"+r;fs.lstatSync(t).isDirectory()?deleteFolderRecursive(t):fs.unlinkSync(t)})),fs.rmdirSync(e))};function logToFile(e){const r=logPath+path.join("TEST.log");return require("fs").appendFileSync(r,(new Date).toISOString()+" "+JSON.stringify(e,null,2)+"\n")}const logPath="./logs",defaultOptions={};"win32"!==process.platform&&Object.assign(defaultOptions,{shell:process.shell});const getResults=(e,r)=>{const s=r&&r.toString(),t=e&&e.toString();return s+(t?(s&&t?"\n":"")+t:"")},nSpawnSync=(e,r)=>{opts=Object.assign({},defaultOptions,r)||defaultOptions;const{spawnSync:s}=require("child_process");try{const t=s(`${e} --nxsPipeErrors`,r);return getResults(t.stderr,t.stdout)}catch(e){return getResults(e.stderr,e.stdout)}};module.exports={nSpawnSync:nSpawnSync,yellow:yellow,blue:blue,green:green,red:red,camelCase:camelCase,exe:exe,deleteFolderRecursive:deleteFolderRecursive,logToFile:logToFile,logPath:logPath};